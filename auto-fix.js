// Script de r√©paration automatique
// √Ä ex√©cuter dans la console du navigateur

console.log('üîß Script de r√©paration automatique');

// Fonction de r√©paration compl√®te
function autoFix() {
    console.log('üîß D√©but de la r√©paration automatique...');
    
    try {
        // 1. Nettoyer compl√®tement
        console.log('1. Nettoyage complet...');
        localStorage.clear();
        sessionStorage.clear();
        console.log('‚úÖ Stockage nettoy√©');
        
        // 2. R√©initialiser les variables globales
        console.log('2. R√©initialisation des variables...');
        if (typeof window !== 'undefined') {
            window.isAuthenticated = false;
            window.currentUser = null;
            window.db = null;
            window.isSupabaseConfigured = false;
            window.projects = [];
            window.sites = [];
        }
        console.log('‚úÖ Variables globales r√©initialis√©es');
        
        // 3. R√©initialiser l'interface
        console.log('3. R√©initialisation de l\'interface...');
        const homepage = document.getElementById('homepage-container');
        const authContainer = document.getElementById('auth-container');
        const mainApp = document.getElementById('main-app');
        
        if (homepage) {
            homepage.style.display = 'block';
            console.log('‚úÖ Page d\'accueil affich√©e');
        } else {
            console.log('‚ùå Page d\'accueil non trouv√©e');
        }
        
        if (authContainer) {
            authContainer.style.display = 'none';
            console.log('‚úÖ Container d\'auth cach√©');
        } else {
            console.log('‚ùå Container d\'auth non trouv√©');
        }
        
        if (mainApp) {
            mainApp.style.display = 'none';
            console.log('‚úÖ Interface principale cach√©e');
        } else {
            console.log('‚ùå Interface principale non trouv√©e');
        }
        
        // 4. Recharger les scripts
        console.log('4. Rechargement des scripts...');
        const scripts = ['ninja-linking-script.js', 'supabase-service.js'];
        scripts.forEach(script => {
            const existingScript = document.querySelector(`script[src*="${script}"]`);
            if (existingScript) {
                existingScript.remove();
                console.log(`üóëÔ∏è Ancien script ${script} supprim√©`);
            }
            
            const newScript = document.createElement('script');
            newScript.src = script + '?v=' + Date.now();
            newScript.onload = () => console.log(`‚úÖ ${script} recharg√©`);
            newScript.onerror = () => console.log(`‚ùå Erreur chargement ${script}`);
            document.head.appendChild(newScript);
        });
        
        // 5. Attendre et r√©initialiser
        console.log('5. R√©initialisation finale...');
        setTimeout(() => {
            console.log('üîÑ R√©initialisation de l\'application...');
            
            if (typeof initializeApp === 'function') {
                initializeApp();
                console.log('‚úÖ Application r√©initialis√©e');
            } else {
                console.log('‚ö†Ô∏è Fonction initializeApp non trouv√©e');
            }
            
            if (typeof setupAuthEventListeners === 'function') {
                setupAuthEventListeners();
                console.log('‚úÖ Event listeners r√©initialis√©s');
            } else {
                console.log('‚ö†Ô∏è Fonction setupAuthEventListeners non trouv√©e');
            }
            
            // Test final
            setTimeout(() => {
                console.log('üß™ Test final...');
                testFinalState();
            }, 2000);
        }, 3000);
        
        console.log('‚úÖ R√©paration automatique termin√©e');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur r√©paration automatique:', error);
        return false;
    }
}

// Fonction de test de l'√©tat final
function testFinalState() {
    console.log('üß™ Test de l\'√©tat final...');
    
    // V√©rifier les √©l√©ments DOM
    const criticalElements = [
        'homepage-container',
        'auth-container', 
        'main-app'
    ];
    
    criticalElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ ${id} trouv√©`);
        } else {
            console.log(`‚ùå ${id} manquant`);
        }
    });
    
    // V√©rifier les boutons de navigation
    const navButtons = document.querySelectorAll('.nav-btn');
    console.log(`Boutons de navigation: ${navButtons.length}`);
    
    // V√©rifier les fonctions
    const functions = [
        'initializeApp',
        'switchPage',
        'loadData',
        'renderProjects'
    ];
    
    functions.forEach(func => {
        const exists = typeof window[func] === 'function';
        console.log(`${func}: ${exists ? '‚úÖ' : '‚ùå'}`);
    });
    
    // V√©rifier les variables globales
    console.log(`isAuthenticated: ${window.isAuthenticated || 'undefined'}`);
    console.log(`currentUser: ${window.currentUser || 'undefined'}`);
    console.log(`db: ${window.db || 'undefined'}`);
    
    console.log('‚úÖ Test final termin√©');
}

// Fonction de diagnostic rapide
function quickDiagnostic() {
    console.log('üîç Diagnostic rapide...');
    
    // √âl√©ments DOM
    const homepage = document.getElementById('homepage-container');
    const authContainer = document.getElementById('auth-container');
    const mainApp = document.getElementById('main-app');
    const navButtons = document.querySelectorAll('.nav-btn');
    
    console.log('√âl√©ments DOM:');
    console.log(`- homepage-container: ${homepage ? '‚úÖ' : '‚ùå'}`);
    console.log(`- auth-container: ${authContainer ? '‚úÖ' : '‚ùå'}`);
    console.log(`- main-app: ${mainApp ? '‚úÖ' : '‚ùå'}`);
    console.log(`- nav-buttons: ${navButtons.length}`);
    
    // Fonctions
    const functions = [
        'initializeApp',
        'switchPage',
        'loadData',
        'renderProjects',
        'checkAuthentication'
    ];
    
    console.log('Fonctions:');
    functions.forEach(func => {
        const exists = typeof window[func] === 'function';
        console.log(`- ${func}: ${exists ? '‚úÖ' : '‚ùå'}`);
    });
    
    // Variables globales
    console.log('Variables globales:');
    console.log(`- isAuthenticated: ${window.isAuthenticated || 'undefined'}`);
    console.log(`- currentUser: ${window.currentUser || 'undefined'}`);
    console.log(`- db: ${window.db || 'undefined'}`);
    console.log(`- isSupabaseConfigured: ${window.isSupabaseConfigured || 'undefined'}`);
    
    console.log('‚úÖ Diagnostic rapide termin√©');
}

// Fonction de r√©paration cibl√©e
function targetedFix() {
    console.log('üéØ R√©paration cibl√©e...');
    
    try {
        // 1. Forcer l'affichage de la page d'accueil
        console.log('1. For√ßage de la page d\'accueil...');
        const homepage = document.getElementById('homepage-container');
        const authContainer = document.getElementById('auth-container');
        const mainApp = document.getElementById('main-app');
        
        if (homepage) {
            homepage.style.display = 'block';
            console.log('‚úÖ Page d\'accueil affich√©e');
        }
        
        if (authContainer) {
            authContainer.style.display = 'none';
            console.log('‚úÖ Container d\'auth cach√©');
        }
        
        if (mainApp) {
            mainApp.style.display = 'none';
            console.log('‚úÖ Interface principale cach√©e');
        }
        
        // 2. R√©initialiser les variables
        console.log('2. R√©initialisation des variables...');
        window.isAuthenticated = false;
        window.currentUser = null;
        window.db = null;
        window.isSupabaseConfigured = false;
        window.projects = [];
        window.sites = [];
        console.log('‚úÖ Variables r√©initialis√©es');
        
        // 3. Nettoyer localStorage
        console.log('3. Nettoyage de localStorage...');
        localStorage.clear();
        console.log('‚úÖ localStorage nettoy√©');
        
        console.log('‚úÖ R√©paration cibl√©e termin√©e');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur r√©paration cibl√©e:', error);
        return false;
    }
}

// Exporter les fonctions
window.autoFix = autoFix;
window.testFinalState = testFinalState;
window.quickDiagnostic = quickDiagnostic;
window.targetedFix = targetedFix;

// Ex√©cuter automatiquement le diagnostic
quickDiagnostic();

console.log('‚úÖ Script de r√©paration automatique charg√©');
console.log('üí° Fonctions disponibles:');
console.log('- autoFix() : R√©paration compl√®te');
console.log('- targetedFix() : R√©paration cibl√©e');
console.log('- quickDiagnostic() : Diagnostic rapide');
console.log('- testFinalState() : Test de l\'√©tat final');
